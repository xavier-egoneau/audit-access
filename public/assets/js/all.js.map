{"version":3,"sources":["formHandler.js","projectHandler.js","learning.js","audit.js"],"names":[],"mappingsrdpfile":"all.js","sourcesContent":["// formHandler.js\r\nclass FormHandler {\r\n    constructor(formElement) {\r\n        if (formElement.dataset.initialized) {\r\n            return;\r\n        }\r\n        \r\n        this.form = formElement;\r\n        this.form.dataset.initialized = 'true';\r\n        this.submitButton = this.form.querySelector('button[type=\"submit\"]');\r\n        this.spinner = this.submitButton?.querySelector('.spinner-border');\r\n        this.url = this.form.getAttribute('action') || `/audit/${currentProjectId}/nc`;\r\n        this.method = this.form.getAttribute('method')?.toUpperCase() || 'POST';\r\n        this.filePreviewContainer = null;\r\n        this.isSubmitting = false;\r\n        this.screens = new Set();\r\n        \r\n        this.setupEventListeners();\r\n    }\r\n\r\n    static initDeleteHandlers() {\r\n        const deleteButtons = document.querySelectorAll('.delete-nc');\r\n        const ncForm = document.querySelector('form.nc-form');\r\n        if (deleteButtons.length > 0 && ncForm) {\r\n            const formHandler = new FormHandler(ncForm);\r\n            deleteButtons.forEach(button => {\r\n                if (!button.dataset.handlerAttached) {\r\n                    formHandler.setupDeleteHandler(button);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    setupEventListeners() {\r\n        this.form.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n            if (this.isSubmitting) return;\r\n            this.isSubmitting = true;\r\n            await this.handleSubmit();\r\n            this.isSubmitting = false;\r\n        });\r\n\r\n        // Gestion du fichier si présent\r\n        const fileInput = this.form.querySelector('input[type=\"file\"]');\r\n        if (fileInput) {\r\n            this.setupFilePreview(fileInput);\r\n        }\r\n\r\n        // Gestion des écrans pour les formulaires de projet\r\n        if (this.form.id === 'newProjectForm' || this.form.id === 'editProjectForm') {\r\n            const addScreenBtn = this.form.querySelector('#addScreen');\r\n            const screenInput = this.form.querySelector('#screenInput');\r\n            \r\n            if (addScreenBtn && screenInput) {\r\n                addScreenBtn.addEventListener('click', () => this.addScreen(screenInput));\r\n                screenInput.addEventListener('keypress', (e) => {\r\n                    if (e.key === 'Enter') {\r\n                        e.preventDefault();\r\n                        this.addScreen(screenInput);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    addScreen(input) {\r\n        const screenName = input.value.trim();\r\n        if (screenName && !this.screens.has(screenName)) {\r\n            this.screens.add(screenName);\r\n            \r\n            const screensList = this.form.querySelector('#screensList');\r\n            const badge = document.createElement('div');\r\n            badge.className = 'badge bg-primary me-2 mb-2';\r\n            badge.innerHTML = `\r\n                ${screenName}\r\n                <button type=\"button\" class=\"btn-close btn-close-white ms-2\" aria-label=\"Supprimer\"></button>\r\n            `;\r\n            \r\n            badge.querySelector('.btn-close').addEventListener('click', () => {\r\n                this.screens.delete(screenName);\r\n                badge.remove();\r\n                // Mettre à jour data-custom après la suppression\r\n                this.updateFormDataCustom();\r\n            });\r\n            \r\n            screensList.appendChild(badge);\r\n            input.value = '';\r\n            \r\n            // Mettre à jour data-custom après l'ajout\r\n            this.updateFormDataCustom();\r\n        }\r\n    }\r\n    updateFormDataCustom() {\r\n        if (this.form.id === 'newProjectForm') {\r\n            this.form.setAttribute('data-custom', JSON.stringify({\r\n                screens: Array.from(this.screens)\r\n            }));\r\n        }\r\n    }\r\n\r\n    setupFilePreview(fileInput) {\r\n        fileInput.addEventListener('change', (e) => {\r\n            const file = e.target.files[0];\r\n            if (!file) return;\r\n\r\n            if (!this.validateFile(file)) {\r\n                fileInput.value = '';\r\n                return;\r\n            }\r\n\r\n            this.showFilePreview(file, fileInput);\r\n        });\r\n    }\r\n\r\n    validateFile(file) {\r\n        if (!file.type.startsWith('image/jpeg')) {\r\n            alert('Seules les images JPG sont acceptées');\r\n            return false;\r\n        }\r\n        \r\n        if (file.size > 5 * 1024 * 1024) {\r\n            alert('L\\'image ne doit pas dépasser 5MB');\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    showFilePreview(file, fileInput) {\r\n        const previewId = `preview-${fileInput.id}`;\r\n        this.filePreviewContainer = this.form.querySelector(`#${previewId}`);\r\n        \r\n        if (!this.filePreviewContainer) {\r\n            this.filePreviewContainer = document.createElement('div');\r\n            this.filePreviewContainer.id = previewId;\r\n            this.filePreviewContainer.className = 'mt-2 image-preview';\r\n            fileInput.parentNode.appendChild(this.filePreviewContainer);\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            this.filePreviewContainer.innerHTML = `\r\n                <img src=\"${e.target.result}\" class=\"img-fluid mb-2\" style=\"max-height: 200px\" alt=\"Aperçu\">\r\n                <button type=\"button\" class=\"btn btn-sm btn-danger d-block w-100\">Supprimer l'image</button>\r\n            `;\r\n            \r\n            this.filePreviewContainer.querySelector('button').onclick = () => {\r\n                fileInput.value = '';\r\n                this.filePreviewContainer.remove();\r\n                this.filePreviewContainer = null;\r\n            };\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    getFormData() {\r\n        if (this.form.id === 'newProjectForm') {\r\n            const formData = new FormData(this.form);\r\n            const pageNames = formData.getAll('page_names[]');\r\n            const pageUrls = formData.getAll('page_urls[]');\r\n            \r\n            // Créer le tableau des screens en combinant les noms et URLs\r\n            const screens = pageNames.map((name, index) => ({\r\n                name: name.trim(),\r\n                url: pageUrls[index] ? pageUrls[index].trim() : ''\r\n            }));\r\n    \r\n            const data = {\r\n                name: formData.get('name'),\r\n                url: formData.get('url'),\r\n                referential: formData.get('referential'),\r\n                screens: screens\r\n            };\r\n    \r\n            console.log('Données formatées:', data); // Pour debug\r\n            return JSON.stringify(data);\r\n        }\r\n        return new FormData(this.form);\r\n    }\r\n\r\n    startLoading() {\r\n        if (this.submitButton) {\r\n            this.submitButton.disabled = true;\r\n        }\r\n        if (this.spinner) {\r\n            this.spinner.classList.remove('d-none');\r\n        }\r\n    }\r\n\r\n    stopLoading() {\r\n        if (this.submitButton) {\r\n            this.submitButton.disabled = false;\r\n        }\r\n        if (this.spinner) {\r\n            this.spinner.classList.add('d-none');\r\n        }\r\n    }\r\n\r\n    showError(message) {\r\n        let errorContainer = this.form.querySelector('.alert-danger');\r\n        if (!errorContainer) {\r\n            errorContainer = document.createElement('div');\r\n            errorContainer.className = 'alert alert-danger mt-3';\r\n            this.form.prepend(errorContainer);\r\n        }\r\n        errorContainer.textContent = message;\r\n    }\r\n\r\n    // Dans formHandler.js, modifier la méthode setupDeleteHandler :\r\n\r\n    setupDeleteHandler(button) {\r\n        // Ne rien faire car la suppression est gérée dans audit.js\r\n        return;\r\n    }\r\n\r\n\r\n    async handleSuccess(response) {\r\n        if (!response.success) {\r\n            throw new Error(response.message || 'Une erreur est survenue');\r\n        }\r\n    \r\n        // Si c'est un formulaire de non-conformité\r\n        if (this.form.classList.contains('nc-form')) {\r\n            if (response.ncId) {\r\n                const existingNc = document.querySelector(`#nc-${response.ncId}`);\r\n                if (!existingNc) {\r\n                    const criterionId = this.form.querySelector('[name=\"criterionId\"]').value;\r\n                    // Utiliser directement le format avec tirets\r\n                    const wrapperId = `wrapper-${criterionId.replace(/\\./g, '-')}`;\r\n                    const wrapper = document.querySelector(`#${wrapperId}`);\r\n                    \r\n                    if (wrapper) {\r\n                        // Préparer les données pour le template\r\n                        const templateData = {\r\n                            id: response.ncId,\r\n                            criterion_id: criterionId,\r\n                            impact: response.impact,\r\n                            description: response.description,\r\n                            solution: response.solution,\r\n                            screenshot_path: response.screenshot_path,\r\n                            pages: response.pages ? response.pages.map(page => page.name) : [],\r\n                            allPages: response.allPages || false\r\n                        };\r\n    \r\n                        try {\r\n                            // Récupérer et insérer le template\r\n                            const templateResponse = await fetch(`/nc-template?data=${encodeURIComponent(JSON.stringify(templateData))}`);\r\n                            \r\n                            if (!templateResponse.ok) {\r\n                                throw new Error('Erreur lors de la récupération du template');\r\n                            }\r\n                            \r\n                            const html = await templateResponse.text();\r\n                            \r\n                            // Si c'est vide, retirer le message \"Aucune NC\"\r\n                            const emptyMessage = wrapper.querySelector('.alert-info');\r\n                            if (emptyMessage && emptyMessage.textContent.includes('Aucune non-conformité')) {\r\n                                emptyMessage.remove();\r\n                            }\r\n                            \r\n                            wrapper.insertAdjacentHTML('afterbegin', html);\r\n                            \r\n                            // Réinitialiser les gestionnaires d'événements\r\n                            FormHandler.initDeleteHandlers();\r\n                            \r\n                            // Animer l'apparition\r\n                            const newNc = wrapper.querySelector(`#nc-${response.ncId}`);\r\n                            if (newNc) {\r\n                                newNc.style.opacity = '0';\r\n                                requestAnimationFrame(() => {\r\n                                    newNc.style.transition = 'opacity 0.3s ease';\r\n                                    newNc.style.opacity = '1';\r\n                                });\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Erreur lors de l\\'ajout de la NC:', error);\r\n                            throw new Error('Erreur lors de l\\'ajout de la non-conformité');\r\n                        }\r\n                    }\r\n    \r\n                    // Fermer la modal si elle existe\r\n                    const modal = bootstrap.Modal.getInstance(this.form.closest('.modal'));\r\n                    if (modal) {\r\n                        modal.hide();\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Réinitialisation du formulaire\r\n            this.form.reset();\r\n            if (this.filePreviewContainer) {\r\n                this.filePreviewContainer.remove();\r\n                this.filePreviewContainer = null;\r\n            }\r\n        } \r\n        // Si c'est un formulaire de projet (nouveau ou édition)\r\n        else if (response.projectId) {\r\n            window.location.href = `/audit/${response.projectId}`;\r\n            return;\r\n        }\r\n    \r\n        // Gestion de la redirection si spécifiée\r\n        const redirect = this.form.getAttribute('data-redirect');\r\n        if (redirect) {\r\n            window.location.href = redirect.replace(':id', response.projectId);\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Fichier: formHandler.js\r\n    // Modification partielle - Dans la classe FormHandler - Méthode handleSubmit\r\n\r\n    // Dans formHandler.js, mettre à jour la méthode handleSubmit :\r\n\r\n    async handleSubmit() {\r\n        try {\r\n            this.startLoading();\r\n            \r\n            // Pour les nouveaux projets et l'édition de projet\r\n            if (this.form.id === 'newProjectForm' || this.form.id === 'editProjectForm') {\r\n                const formData = new FormData(this.form);\r\n                const pageNames = formData.getAll('page_names[]');\r\n                const pageUrls = formData.getAll('page_urls[]');\r\n                \r\n                const screens = pageNames.map((name, index) => ({\r\n                    name: name.trim(),\r\n                    url: pageUrls[index] ? pageUrls[index].trim() : ''\r\n                })).filter(screen => screen.name);\r\n    \r\n                const data = {\r\n                    name: formData.get('name'),\r\n                    url: formData.get('url'),\r\n                    referential: formData.get('referential'),\r\n                    referentialVersion: formData.get('referentialVersion'),\r\n                    screens: screens\r\n                };\r\n    \r\n                console.log('Données à envoyer:', data);\r\n    \r\n                const response = await fetch(this.form.action, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Accept': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                });\r\n    \r\n                if (!response.ok) {\r\n                    throw new Error(`Erreur HTTP: ${response.status}`);\r\n                }\r\n    \r\n                const result = await response.json();\r\n                \r\n                if (result.success) {\r\n                    if (result.projectId) {\r\n                        window.location.href = `/audit/${result.projectId}`;\r\n                        return;\r\n                    } else {\r\n                        // Pour l'édition, recharger la page courante\r\n                        window.location.reload();\r\n                        return;\r\n                    }\r\n                } else {\r\n                    throw new Error(result.message || 'Une erreur est survenue');\r\n                }\r\n            }\r\n            // Pour les autres types de formulaires (comme les NC)\r\n            else {\r\n                const fetchOptions = {\r\n                    method: this.method\r\n                };\r\n    \r\n                if (this.method === 'POST' || this.method === 'PUT') {\r\n                    fetchOptions.body = new FormData(this.form);\r\n                }\r\n    \r\n                const response = await fetch(this.form.action, fetchOptions);\r\n                \r\n                if (!response.ok) {\r\n                    throw new Error(`Erreur HTTP: ${response.status}`);\r\n                }\r\n    \r\n                const result = await response.json();\r\n    \r\n                if (result.success) {\r\n                    if (result.ncId) {\r\n                        // Mise à jour de la carte NC existante\r\n                        const card = document.querySelector(`#nc-${result.ncId}`);\r\n                        if (card) {\r\n                            // Mettre à jour l'impact\r\n                            const impactElement = card.querySelector('h5.card-title + p');\r\n                            if (impactElement) {\r\n                                impactElement.textContent = fetchOptions.body.get('impact') || '';\r\n                            }\r\n    \r\n                            // Mettre à jour la description\r\n                            const descriptionElement = card.querySelector('h5.card-text + p');\r\n                            if (descriptionElement) {\r\n                                descriptionElement.textContent = fetchOptions.body.get('description') || '';\r\n                            }\r\n    \r\n                            // Mettre à jour la solution\r\n                            const solutionElement = card.querySelector('h5.card-title:last-of-type + p');\r\n                            if (solutionElement) {\r\n                                solutionElement.textContent = fetchOptions.body.get('solution') || '';\r\n                            }\r\n    \r\n                            // Mettre à jour l'image si une nouvelle a été uploadée\r\n                            if (result.screenshot_path) {\r\n                                const imgElement = card.querySelector('img.card-img-top');\r\n                                if (imgElement) {\r\n                                    imgElement.src = result.screenshot_path;\r\n                                } else {\r\n                                    // Si pas d'image existante, en ajouter une nouvelle\r\n                                    card.insertAdjacentHTML('afterbegin', \r\n                                        `<img src=\"${result.screenshot_path}\" class=\"card-img-top\" alt=\"Capture d'écran de la non-conformité\">`\r\n                                    );\r\n                                }\r\n                            }\r\n    \r\n                            // Animation de mise à jour\r\n                            card.style.transition = 'background-color 0.3s ease';\r\n                            card.style.backgroundColor = '#e8f5e9';\r\n                            setTimeout(() => {\r\n                                card.style.backgroundColor = '';\r\n                            }, 500);\r\n                        }\r\n    \r\n                        // Fermeture de la modal\r\n                        const modalElement = this.form.closest('.modal');\r\n                        if (modalElement) {\r\n                            const modal = bootstrap.Modal.getInstance(modalElement);\r\n                            if (modal) {\r\n                                modal.hide();\r\n                            }\r\n                        }\r\n    \r\n                        // Réinitialiser le formulaire\r\n                        this.form.reset();\r\n                        if (this.filePreviewContainer) {\r\n                            this.filePreviewContainer.innerHTML = '';\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                await this.handleSuccess(result);\r\n            }\r\n        } catch (error) {\r\n            console.error('Erreur:', error);\r\n            this.showError(error.message);\r\n        } finally {\r\n            this.stopLoading();\r\n        }\r\n    }\r\n    \r\n    \r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const forms = document.querySelectorAll('form.senddata, form[id^=\"ncForm-\"]');\r\n    if (forms.length > 0) {\r\n        forms.forEach(form => {\r\n            if (!form.dataset.initialized) {\r\n                new FormHandler(form);\r\n            }\r\n        });\r\n    }\r\n});\r\n","class ProjectHandler {\r\n    constructor() {\r\n        console.log('ProjectHandler initialized');\r\n        this.pages = new Map();\r\n        this.pageCounter = 0;\r\n        this.initializeEventListeners();\r\n    }\r\n\r\n    initializeEventListeners() {\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n            ['newProject', 'editProject'].forEach(modalId => {\r\n                const addPageBtn = document.getElementById(`${modalId}`).querySelector('#addNewPageRow');\r\n                if (addPageBtn) {\r\n                    addPageBtn.addEventListener('click', () => this.addNewPageRow(modalId));\r\n                }\r\n\r\n                const pagesList = document.getElementById(`${modalId}`).querySelector('#pagesList');\r\n                if (pagesList && pagesList.children.length === 0 && modalId === 'newProject') {\r\n                    this.addNewPageRow(modalId);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    addNewPageRow(modalId) {\r\n        const modal = document.getElementById(modalId);\r\n        const pagesList = modal.querySelector('#pagesList');\r\n        const rowId = ++this.pageCounter;\r\n\r\n        const row = document.createElement('div');\r\n        row.className = 'row mb-2 align-items-center';\r\n        row.dataset.rowId = rowId;\r\n        row.innerHTML = `\r\n            <div class=\"col-5\">\r\n                <input type=\"text\" \r\n                       class=\"form-control page-name\" \r\n                       name=\"page_names[]\"\r\n                       placeholder=\"Nom de la page\"\r\n                       required>\r\n            </div>\r\n            <div class=\"col-6\">\r\n                <input type=\"url\" \r\n                       class=\"form-control page-url\" \r\n                       name=\"page_urls[]\"\r\n                       placeholder=\"URL de la page\">\r\n            </div>\r\n            <div class=\"col-1\">\r\n                <button type=\"button\" \r\n                        class=\"btn btn-outline-danger delete-page\"\r\n                        ${pagesList.children.length === 0 ? 'disabled' : ''}>\r\n                    <i class=\"fas fa-trash\"></i>\r\n                </button>\r\n            </div>\r\n        `;\r\n\r\n        // Gestionnaire de suppression de ligne\r\n        const deleteBtn = row.querySelector('.delete-page');\r\n        deleteBtn.addEventListener('click', () => {\r\n            row.remove();\r\n            const remainingRows = pagesList.querySelectorAll('.row');\r\n            if (remainingRows.length === 1) {\r\n                remainingRows[0].querySelector('.delete-page').disabled = true;\r\n            }\r\n        });\r\n\r\n        pagesList.appendChild(row);\r\n        \r\n        const allRows = pagesList.querySelectorAll('.row');\r\n        if (allRows.length > 1) {\r\n            allRows.forEach(r => {\r\n                const delBtn = r.querySelector('.delete-page');\r\n                if (delBtn) delBtn.disabled = false;\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nnew ProjectHandler();","class LearningUI {\r\n    constructor() {\r\n        this.currentCriterionId = null;\r\n        this.setupEventListeners();\r\n        this.setupFormListeners();\r\n    }\r\n    \r\n    setupFormListeners() {\r\n        // Écouter les ouvertures de modal d'ajout de NC\r\n        document.addEventListener('shown.bs.modal', async (event) => {\r\n            const modal = event.target;\r\n            if (!modal.id.startsWith('addnc-')) return;\r\n\r\n            const criterionId = modal.id.replace('addnc-', '').replace('-', '.');\r\n            const form = modal.querySelector('form');\r\n            \r\n            // Charger les suggestions au chargement de la modal\r\n            await this.loadSuggestionsForForm(criterionId, form);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    async loadSuggestionsForForm(criterionId, form) {\r\n        try {\r\n            const response = await fetch(`/api/learning/suggestions/${criterionId}`);\r\n            const data = await response.json();\r\n\r\n            if (!data.success || !data.suggestions?.length) {\r\n                return;\r\n            }\r\n\r\n            // Afficher les suggestions dans le formulaire\r\n            const containers = form.querySelectorAll('.suggestions-container');\r\n            containers.forEach(container => {\r\n                const suggestionsList = container.querySelector('.suggestions-list');\r\n                const textArea = container.nextElementSibling;\r\n                const fieldType = textArea.name; // impact, description ou solution\r\n\r\n                const relevantSuggestions = data.suggestions\r\n                    .filter(s => s.confidence > 0.3) // Ne montrer que les suggestions pertinentes\r\n                    .map(s => s[fieldType])\r\n                    .filter(Boolean);\r\n\r\n                if (relevantSuggestions.length > 0) {\r\n                    container.classList.remove('d-none');\r\n                    suggestionsList.innerHTML = relevantSuggestions.map(suggestion => `\r\n                        <div class=\"suggestion-item\">\r\n                            <button type=\"button\" class=\"btn btn-link btn-sm use-suggestion\" \r\n                                    data-suggestion=\"${this.escapeHtml(suggestion)}\">\r\n                                Utiliser cette suggestion\r\n                            </button>\r\n                            <div class=\"text-muted small\">${this.escapeHtml(suggestion)}</div>\r\n                        </div>\r\n                    `).join('');\r\n\r\n                    // Ajouter les gestionnaires de clic\r\n                    suggestionsList.querySelectorAll('.use-suggestion').forEach(btn => {\r\n                        btn.onclick = () => {\r\n                            textArea.value = btn.dataset.suggestion;\r\n                            container.classList.add('d-none');\r\n                        };\r\n                    });\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement des suggestions:', error);\r\n        }\r\n    }\r\n\r\n    escapeHtml(text) {\r\n        const div = document.createElement('div');\r\n        div.textContent = text;\r\n        return div.innerHTML;\r\n    }\r\n    async analyzeContext(criterionId, currentContext) {\r\n        // 1. Patterns techniques\r\n        const technicalPatterns = {\r\n            images: ['alt', 'aria-label', 'role=\"img\"'],\r\n            forms: ['label', 'aria-labelledby', 'required'],\r\n            structure: ['heading', 'nav', 'main', 'aria-hidden'],\r\n            // etc.\r\n        };\r\n    \r\n        // 2. Contexte de la page\r\n        const pageContext = {\r\n            type: 'formulaire|navigation|contenu|...',\r\n            importance: 'critique|importante|secondaire',\r\n            composants: ['images', 'formulaires', 'tableaux']\r\n        };\r\n    \r\n        // 3. Historique des NC\r\n        const previousNCs = await this.getPreviousNCs(criterionId);\r\n    \r\n        return {\r\n            technicalContext: this.matchTechnicalPatterns(currentContext),\r\n            pageContext: this.analyzePageContext(currentContext),\r\n            historicalContext: this.analyzeHistory(previousNCs),\r\n            similarityScore: this.calculateContextSimilarity(currentContext, previousNCs)\r\n        };\r\n    }\r\n\r\n    setupEventListeners() {\r\n        // Ajouter un bouton \"Suggestions IA\" à côté de chaque critère\r\n        document.querySelectorAll('.criterion-status').forEach(select => {\r\n            const container = select.closest('.d-flex');\r\n            const criterionId = select.dataset.criterion;\r\n            \r\n            const btn = document.createElement('button');\r\n            btn.className = 'btn btn-outline-info btn-sm ms-2';\r\n            btn.innerHTML = '<i class=\"fas fa-robot\"></i>';\r\n            btn.title = 'Voir les suggestions IA';\r\n            btn.onclick = () => this.showSuggestions(criterionId);\r\n            \r\n            container.appendChild(btn);\r\n        });\r\n\r\n        // Gestionnaire du filtre de pertinence\r\n        document.getElementById('learning-filter')?.addEventListener('change', e => {\r\n            if (this.currentCriterionId) {\r\n                this.showSuggestions(this.currentCriterionId);\r\n            }\r\n        });\r\n    }\r\n\r\n    async showSuggestions(criterionId) {\r\n        this.currentCriterionId = criterionId;\r\n        const modalElement = document.getElementById('learningModal');\r\n        modalElement.removeAttribute('inert'); // Retirer inert avant d'afficher\r\n        const modal = new bootstrap.Modal(modalElement);\r\n        modal.show();\r\n    \r\n        modalElement.addEventListener('hidden.bs.modal', () => {\r\n            modalElement.setAttribute('inert', ''); // Remettre inert quand on ferme\r\n        }, { once: true });\r\n    \r\n        try {\r\n            // Charger les métriques\r\n            const metricsResponse = await fetch(`/api/learning/metrics/${criterionId}`);\r\n            const metricsData = await metricsResponse.json();\r\n            \r\n            if (metricsData.success) {\r\n                this.updateMetrics(metricsData.metrics[0] || {});\r\n            }\r\n\r\n            // Charger les suggestions\r\n            const minConfidence = document.getElementById('learning-filter').value;\r\n            const suggestionsResponse = await fetch(\r\n                `/api/learning/suggestions/${criterionId}?context=${encodeURIComponent(\r\n                    JSON.stringify({minConfidence})\r\n                )}`\r\n            );\r\n            const suggestionsData = await suggestionsResponse.json();\r\n            \r\n            if (suggestionsData.success) {\r\n                this.updateSuggestions(suggestionsData.suggestions);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement des suggestions:', error);\r\n        }\r\n    }\r\n\r\n    updateMetrics(metrics) {\r\n        const container = document.getElementById('learning-metrics');\r\n        if (!container) return;\r\n\r\n        container.innerHTML = `\r\n            <div>Nombre de suggestions : ${metrics.suggestion_count || 0}</div>\r\n            <div>Taux de succès : ${Math.round((metrics.success_rate || 0) * 100)}%</div>\r\n            <div>Utilisations totales : ${metrics.usage_count || 0}</div>\r\n        `;\r\n    }\r\n\r\n    updateSuggestions(suggestions) {\r\n        const container = document.getElementById('learning-suggestions');\r\n        if (!container) return;\r\n\r\n        if (!suggestions || suggestions.length === 0) {\r\n            container.innerHTML = `\r\n                <div class=\"alert alert-info\">\r\n                    Aucune suggestion disponible pour ce critère.\r\n                </div>\r\n            `;\r\n            return;\r\n        }\r\n\r\n        container.innerHTML = suggestions.map(suggestion => `\r\n            <div class=\"card mb-3\">\r\n                <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n                    <div>\r\n                        Confiance : ${Math.round((suggestion.confidence || 0) * 100)}%\r\n                        <span class=\"badge bg-secondary ms-2\">\r\n                            ${suggestion.projects_count || 0} projet(s)\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"btn-group\">\r\n                        <button class=\"btn btn-sm btn-success use-suggestion\" \r\n                                data-suggestion='${JSON.stringify(suggestion)}'>\r\n                            Utiliser\r\n                        </button>\r\n                        <button class=\"btn btn-sm btn-outline-secondary rate-suggestion\" \r\n                                data-suggestion-id=\"${suggestion.id}\"\r\n                                data-helpful=\"true\">\r\n                            👍\r\n                        </button>\r\n                        <button class=\"btn btn-sm btn-outline-secondary rate-suggestion\" \r\n                                data-suggestion-id=\"${suggestion.id}\"\r\n                                data-helpful=\"false\">\r\n                            👎\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    <h6>Impact :</h6>\r\n                    <p>${suggestion.impact}</p>\r\n                    <h6>Description :</h6>\r\n                    <p>${suggestion.description}</p>\r\n                    <h6>Solution proposée :</h6>\r\n                    <p>${suggestion.solution}</p>\r\n                </div>\r\n            </div>\r\n        `).join('');\r\n\r\n        // Ajouter les écouteurs d'événements\r\n        container.querySelectorAll('.use-suggestion').forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const suggestion = JSON.parse(btn.dataset.suggestion);\r\n                this.useSuggestion(suggestion);\r\n            });\r\n        });\r\n\r\n        container.querySelectorAll('.rate-suggestion').forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const suggestionId = btn.dataset.suggestionId;\r\n                const isHelpful = btn.dataset.helpful === 'true';\r\n                this.rateSuggestion(suggestionId, isHelpful);\r\n            });\r\n        });\r\n    }\r\n\r\n    async useSuggestion(suggestion) {\r\n        // Convertir l'ID du critère en un sélecteur CSS valide\r\n        // Remplacer tous les points par des tirets\r\n        const formId = `ncForm-${this.currentCriterionId.replace(/\\./g, '-')}`;\r\n        const form = document.querySelector(`#${formId}`);\r\n        \r\n        if (!form) {\r\n            console.warn(`Formulaire #${formId} non trouvé`);\r\n            return;\r\n        }\r\n    \r\n        form.querySelector('[name=\"impact\"]').value = suggestion.impact;\r\n        form.querySelector('[name=\"description\"]').value = suggestion.description;\r\n        form.querySelector('[name=\"solution\"]').value = suggestion.solution;\r\n    \r\n        // Fermer la modale des suggestions\r\n        const learningModal = document.getElementById('learningModal');\r\n        const modalInstance = bootstrap.Modal.getInstance(learningModal);\r\n        modalInstance.hide();\r\n        learningModal.setAttribute('inert', '');\r\n        \r\n        // Ouvrir la modale d'ajout de NC\r\n        const ncModalId = `addnc-${this.currentCriterionId.replace(/\\./g, '-')}`;\r\n        const ncModalElement = document.getElementById(ncModalId);\r\n        \r\n        if (!ncModalElement) {\r\n            console.warn(`Modal #${ncModalId} non trouvée`);\r\n            return;\r\n        }\r\n        \r\n        ncModalElement.removeAttribute('inert');\r\n        const ncModal = new bootstrap.Modal(ncModalElement);\r\n        ncModal.show();\r\n    \r\n        ncModalElement.addEventListener('hidden.bs.modal', () => {\r\n            ncModalElement.setAttribute('inert', '');\r\n        }, { once: true });\r\n    }\r\n\r\n    async rateSuggestion(suggestionId, isHelpful) {\r\n        try {\r\n            const learningModal = document.getElementById('learningModal');\r\n            const modalInstance = bootstrap.Modal.getInstance(learningModal);\r\n            modalInstance?.hide();\r\n            learningModal.setAttribute('inert', '');\r\n    \r\n            const response = await fetch('/api/feedback', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    suggestionId,\r\n                    isHelpful,\r\n                    criterionId: this.currentCriterionId,\r\n                    projectId: currentProjectId\r\n                })\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error('Erreur lors de l\\'envoi du feedback');\r\n            }\r\n    \r\n            // Feedback visuel\r\n            const feedbackDiv = document.createElement('div');\r\n            feedbackDiv.className = `alert alert-${isHelpful ? 'success' : 'info'} position-fixed top-0 start-50 translate-middle-x mt-3`;\r\n            feedbackDiv.style.zIndex = '9999';\r\n            feedbackDiv.textContent = isHelpful ? 'Merci pour votre retour positif !' : 'Merci pour votre retour';\r\n            document.body.appendChild(feedbackDiv);\r\n            setTimeout(() => feedbackDiv.remove(), 2000);\r\n    \r\n            // Attendre que la modale soit fermée avant de recharger les suggestions\r\n            setTimeout(async () => {\r\n                // Nettoyer les événements de la modale précédente\r\n                const oldModal = document.getElementById('learningModal');\r\n                const newModal = oldModal.cloneNode(true);\r\n                oldModal.parentNode.replaceChild(newModal, oldModal);\r\n                \r\n                // Recharger les suggestions avec la nouvelle modale\r\n                await this.showSuggestions(this.currentCriterionId);\r\n            }, 500);\r\n    \r\n        } catch (error) {\r\n            console.error('Erreur lors de l\\'envoi du feedback:', error);\r\n            // Feedback visuel d'erreur\r\n            const errorDiv = document.createElement('div');\r\n            errorDiv.className = 'alert alert-danger position-fixed top-0 start-50 translate-middle-x mt-3';\r\n            errorDiv.style.zIndex = '9999';\r\n            errorDiv.textContent = 'Erreur lors de l\\'enregistrement du retour';\r\n            document.body.appendChild(errorDiv);\r\n            setTimeout(() => errorDiv.remove(), 3000);\r\n        }\r\n    }\r\n}\r\n\r\n// Initialisation\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    window.learningUI = new LearningUI();\r\n});","document.addEventListener('DOMContentLoaded', function() {\r\n\r\n    console.log('Script audit.js chargé !');\r\n    \r\n    // Au chargement de la page, récupérer le pageId de l'URL\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const pageId = urlParams.get('pageId');\r\n    \r\n    if (pageId) {\r\n        const screenSelector = document.getElementById('screenSelector');\r\n        if (screenSelector) {\r\n            screenSelector.value = pageId;\r\n        }\r\n    }\r\n\r\n    // Dans audit.js - gestionnaires d'événements pour modifier et supprimer\r\n    document.addEventListener('click', async function(e) {\r\n        // Gestion du bouton supprimer\r\n        if (e.target.matches('.delete-nc') && !e.target.dataset.handlerAttached) {\r\n            console.log(\"Clic sur supprimer détecté\");\r\n            const ncId = e.target.dataset.ncId;\r\n            console.log(\"NC ID:\", ncId);\r\n            e.target.dataset.handlerAttached = 'true'; // Marquer le gestionnaire comme attaché\r\n            \r\n            if (!ncId) {\r\n                console.error('ID de la NC manquant');\r\n                return;\r\n            }\r\n    \r\n            if (!confirm('Êtes-vous sûr de vouloir supprimer cette non-conformité ?')) {\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                const response = await fetch(`/audit/${currentProjectId}/nc/${ncId}`, {\r\n                    method: 'DELETE'\r\n                });\r\n    \r\n                if (!response.ok) {\r\n                    throw new Error(`Erreur HTTP: ${response.status}`);\r\n                }\r\n    \r\n                const data = await response.json();\r\n                if (data.success) {\r\n                    const card = e.target.closest('.card');\r\n                    if (card) {\r\n                        // Animation de suppression\r\n                        card.style.transition = 'all 0.3s ease';\r\n                        card.style.opacity = '0';\r\n                        card.style.transform = 'translateX(-20px)';\r\n                        \r\n                        setTimeout(() => {\r\n                            card.remove();\r\n                            \r\n                            // Nettoyage manuel du backdrop et restauration du scroll\r\n                            const backdrop = document.querySelector('.modal-backdrop');\r\n                            if (backdrop) {\r\n                                backdrop.remove();\r\n                            }\r\n                            document.body.classList.remove('modal-open');\r\n                            document.body.style.overflow = '';\r\n                            document.body.style.paddingRight = '';\r\n                            \r\n                            // Vérifier s'il reste des NC\r\n                            const wrapper = card.closest('.wrapper_ncs');\r\n                            if (wrapper && !wrapper.querySelector('.card')) {\r\n                                wrapper.innerHTML = `\r\n                                    <div class=\"alert alert-info\">\r\n                                        Aucune non-conformité trouvée pour ce critère\r\n                                    </div>\r\n                                `;\r\n                            }\r\n                        }, 300);\r\n                    }\r\n                } else {\r\n                    throw new Error(data.message || 'Erreur lors de la suppression');\r\n                }\r\n            } catch (error) {\r\n                console.error('Erreur lors de la suppression:', error);\r\n                alert('Erreur lors de la suppression: ' + error.message);\r\n                \r\n                // Nettoyage en cas d'erreur\r\n                const backdrop = document.querySelector('.modal-backdrop');\r\n                if (backdrop) {\r\n                    backdrop.remove();\r\n                }\r\n                document.body.classList.remove('modal-open');\r\n                document.body.style.overflow = '';\r\n                document.body.style.paddingRight = '';\r\n            }\r\n        }\r\n\r\n        // Gestion du bouton modifier\r\n        if (e.target.matches('.btn-modifier')) {\r\n            console.log(\"Clic sur modifier détecté\");\r\n            const button = e.target;\r\n            const card = button.closest('.card');\r\n            const ncId = button.dataset.ncId;\r\n            const criterionId = button.dataset.criterionId;\r\n            \r\n            console.log(\"Données du bouton:\", {\r\n                ncId,\r\n                criterionId,\r\n                card: !!card\r\n            });\r\n            \r\n            if (!ncId || !card || !criterionId) {\r\n                console.error('Données manquantes pour l\\'édition');\r\n                return;\r\n            }\r\n        \r\n            const modalId = `nc-modal-${criterionId.replace(/\\./g, '-')}`;\r\n            console.log(\"Recherche modal avec ID:\", modalId);\r\n            \r\n            const modal = document.getElementById(modalId);\r\n            if (!modal) {\r\n                console.error('Modal non trouvée. Modales disponibles:', \r\n                    Array.from(document.querySelectorAll('.modal')).map(m => m.id)\r\n                );\r\n                return;\r\n            }\r\n        \r\n            const form = modal.querySelector('form');\r\n            if (!form) {\r\n                console.error('Formulaire non trouvé dans la modal');\r\n                return;\r\n            }\r\n            // Vérifions que tous les champs nécessaires existent\r\n            const fields = {\r\n                ncId: form.querySelector('[name=\"ncId\"]'),\r\n                criterionId: form.querySelector('[name=\"criterionId\"]')\r\n            };\r\n            // Log de debug pour voir quels champs sont trouvés\r\n            console.log(\"Champs trouvés dans le formulaire:\", {\r\n                ncId: !!fields.ncId,\r\n                criterionId: !!fields.criterionId\r\n            });\r\n\r\n            // Vérification avant assignation\r\n            if (!fields.ncId || !fields.criterionId) {\r\n                console.error('Champs manquants dans le formulaire');\r\n                return;\r\n            }\r\n            fields.ncId.value = ncId;\r\n            fields.criterionId.value = criterionId;\r\n\r\n            // Configuration de la modal pour l'édition\r\n            modal.querySelectorAll('.mode-create').forEach(el => el.style.display = 'none');\r\n            modal.querySelectorAll('.mode-edit').forEach(el => el.style.display = 'inline');\r\n            modal.querySelectorAll('.create-mode-field').forEach(el => el.style.display = 'none');\r\n    \r\n            // Récupérer toutes les données de la carte\r\n            const ncData = {\r\n                impact: card.querySelector('h5.card-title + p')?.textContent?.trim(),\r\n                description: card.querySelector('h5.card-text + p')?.textContent?.trim(),\r\n                solution: card.querySelector('h5.card-title:last-of-type + p')?.textContent?.trim(),\r\n                screenshot: card.querySelector('img.card-img-top')?.src\r\n            };\r\n            console.log(\"Données de la NC à éditer:\", ncData);\r\n    \r\n            try {\r\n                // Remplir les champs cachés\r\n                const ncIdInput = form.querySelector('[name=\"ncId\"]');\r\n                const criterionIdInput = form.querySelector('[name=\"criterionId\"]');\r\n                const impactInput = form.querySelector('[name=\"impact\"]');\r\n                const descriptionInput = form.querySelector('[name=\"description\"]');\r\n                const solutionInput = form.querySelector('[name=\"solution\"]');\r\n    \r\n                console.log(\"Champs trouvés:\", {\r\n                    ncId: !!ncIdInput,\r\n                    criterionId: !!criterionIdInput,\r\n                    impact: !!impactInput,\r\n                    description: !!descriptionInput,\r\n                    solution: !!solutionInput\r\n                });\r\n    \r\n                if (ncIdInput) ncIdInput.value = ncId;\r\n                if (criterionIdInput) criterionIdInput.value = button.dataset.criterionId;\r\n                if (impactInput) impactInput.value = ncData.impact || '';\r\n                if (descriptionInput) descriptionInput.value = ncData.description || '';\r\n                if (solutionInput) solutionInput.value = ncData.solution || '';\r\n    \r\n                // Gérer la capture d'écran\r\n                const currentScreenshot = form.querySelector('#current-screenshot');\r\n                if (currentScreenshot && ncData.screenshot) {\r\n                    currentScreenshot.innerHTML = `\r\n                        <img src=\"${ncData.screenshot}\" class=\"img-fluid mb-2\" alt=\"Capture d'écran actuelle\">\r\n                        <small class=\"text-muted d-block\">Capture d'écran actuelle</small>\r\n                    `;\r\n                }\r\n    \r\n                // Afficher la modal\r\n                const modalInstance = new bootstrap.Modal(modal);\r\n                modalInstance.show();\r\n                modal.addEventListener('hidden.bs.modal', () => {\r\n                    document.body.classList.remove('modal-open');\r\n                    document.body.style.paddingRight = '';\r\n                    document.body.style.overflow = '';\r\n                    const backdrop = document.querySelector('.modal-backdrop');\r\n                    if (backdrop) {\r\n                        backdrop.remove();\r\n                    }\r\n                }, { once: true }); // L'option once:true fait que l'événement se supprime automatiquement après utilisation\r\n    \r\n            } catch (error) {\r\n                console.error(\"Erreur lors du remplissage du formulaire:\", error);\r\n            }\r\n        }\r\n    });\r\n\r\n    \r\n    // Initialisation des dropdowns\r\n    const dropdownElementList = document.querySelectorAll('.dropdown-toggle');\r\n    const dropdownList = [...dropdownElementList].map(dropdownToggleEl => \r\n        new bootstrap.Dropdown(dropdownToggleEl)\r\n    );\r\n\r\n    // Initialisation des modales pour la méthodologie\r\n    document.querySelectorAll('button[data-bs-target^=\"#test-modal_\"]').forEach(button => {\r\n        const targetId = button.getAttribute('data-bs-target');\r\n        const modalElement = document.querySelector(targetId);\r\n        if (modalElement && !modalElement.initialized) {\r\n            new bootstrap.Modal(modalElement, {\r\n                backdrop: true,\r\n                keyboard: true\r\n            });\r\n            modalElement.initialized = true;\r\n\r\n            button.addEventListener('click', function(e) {\r\n                e.preventDefault();\r\n                const modal = bootstrap.Modal.getInstance(modalElement);\r\n                if (modal) {\r\n                    modal.show();\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n\r\n    \r\n    \r\n    // Ajoutez également ce gestionnaire pour les boutons qui ouvrent les modales\r\n    document.querySelectorAll('[data-bs-toggle=\"modal\"]').forEach(button => {\r\n\r\n        button.addEventListener('click', function(e) {\r\n            console.log('Clic sur bouton modale');\r\n            console.log('Target modal:', document.querySelector(this.getAttribute('data-bs-target')));\r\n            const targetModalId = this.getAttribute('data-bs-target');\r\n            const modal = document.querySelector(targetModalId);\r\n            if (modal) {\r\n                const modalInstance = bootstrap.Modal.getOrCreateInstance(modal);\r\n                modalInstance.show();\r\n            }\r\n        });\r\n    });\r\n\r\n\r\n    function updateRates(rates) {\r\n        if (rates.currentRate !== undefined) {\r\n            document.getElementById('taux_conform_pa').textContent = `${rates.currentRate}%`;\r\n        }\r\n        if (rates.averageRate !== undefined) {\r\n            document.getElementById('taux_moyen').textContent = `${rates.averageRate}%`;\r\n        }\r\n        if (rates.globalRate !== undefined) {\r\n            document.getElementById('taux_conform').textContent = `${rates.globalRate}%`;\r\n        }\r\n    }   \r\n        \r\n    // Gestion des critères\r\n    document.querySelectorAll('.criterion-status').forEach(select => {\r\n        select.addEventListener('change', async function() {\r\n            const criterionId = this.dataset.criterion;\r\n            const status = this.value;\r\n            const pageId = document.getElementById('screenSelector')?.value;\r\n            \r\n            // Ne pas permettre la sélection de 'MULTIPLE'\r\n            if (status === 'MULTIPLE') {\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                const url = `/audit/${currentProjectId}/criterion/${criterionId}`;\r\n                const body = pageId ? \r\n                    { status, pageId } : \r\n                    { status, allPages: true };\r\n    \r\n                const response = await fetch(url, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                });\r\n                \r\n                const data = await response.json();\r\n                \r\n                if (data.success && data.rates) {\r\n                    updateRates(data.rates);\r\n                    \r\n                    // Mise à jour visuelle du statut\r\n                    if (data.hasDifferentStatuses) {\r\n                        // Ajouter l'indicateur visuel si nécessaire\r\n                        const container = select.closest('.d-flex');\r\n                        if (!container.querySelector('.badge')) {\r\n                            container.insertAdjacentHTML('beforeend', `\r\n                                <span class=\"badge bg-warning\" \r\n                                      data-bs-toggle=\"tooltip\" \r\n                                      title=\"Les statuts diffèrent selon les pages\">\r\n                                    <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                </span>\r\n                            `);\r\n                            // Initialiser le nouveau tooltip\r\n                            new bootstrap.Tooltip(container.querySelector('[data-bs-toggle=\"tooltip\"]'));\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Erreur lors de la mise à jour du statut:', error)\r\n                // Optionnel: Ajouter une notification d'erreur\r\n                const alert = document.createElement('div');\r\n                alert.className = 'alert alert-danger fade show position-fixed bottom-0 end-0 m-3';\r\n                alert.textContent = 'Erreur lors de la mise à jour du statut';\r\n                document.body.appendChild(alert);\r\n                setTimeout(() => alert.remove(), 3000);\r\n            }\r\n        });\r\n    });\r\n\r\n\r\n    \r\n\r\n    // Gestion des écrans\r\n    const screens = new Set();\r\n    const screenInput = document.getElementById('screenInput');\r\n    const addScreenBtn = document.getElementById('addScreen');\r\n    const screensList = document.getElementById('screensList');\r\n    const newProjectForm = document.getElementById('newProjectForm');\r\n\r\n    function updateScreensData() {\r\n        if (newProjectForm) {\r\n            newProjectForm.setAttribute('data-custom', JSON.stringify({\r\n                screens: Array.from(screens)\r\n            }));\r\n        }\r\n    }\r\n\r\n    function addScreen(screenName) {\r\n        if (screenName && !screens.has(screenName)) {\r\n            screens.add(screenName);\r\n            \r\n            const badge = document.createElement('div');\r\n            badge.className = 'badge bg-primary me-2 mb-2';\r\n            badge.innerHTML = `\r\n                ${screenName}\r\n                <button type=\"button\" class=\"btn-close btn-close-white ms-2\" aria-label=\"Supprimer\"></button>\r\n            `;\r\n            \r\n            badge.querySelector('.btn-close').addEventListener('click', () => {\r\n                screens.delete(screenName);\r\n                badge.remove();\r\n                updateScreensData();\r\n            });\r\n            \r\n            screensList.appendChild(badge);\r\n            updateScreensData();\r\n        }\r\n    }\r\n\r\n    // Gestionnaire du bouton d'ajout d'écran\r\n    addScreenBtn?.addEventListener('click', () => {\r\n        const screenName = screenInput.value.trim();\r\n        if (screenName) {\r\n            addScreen(screenName);\r\n            screenInput.value = '';\r\n        }\r\n    });\r\n\r\n    // Permettre l'ajout d'écran avec la touche Enter\r\n    screenInput?.addEventListener('keypress', (e) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            const screenName = screenInput.value.trim();\r\n            if (screenName) {\r\n                addScreen(screenName);\r\n                screenInput.value = '';\r\n            }\r\n        }\r\n    });\r\n\r\n    // Gestion du changement d'écran\r\n    const screenSelector = document.getElementById('screenSelector');\r\n    if (screenSelector) {\r\n        screenSelector.addEventListener('change', function() {\r\n            const pageId = this.value;\r\n            const url = new URL(window.location);\r\n            if (pageId) {\r\n                url.searchParams.set('pageId', pageId);\r\n            } else {\r\n                url.searchParams.delete('pageId');\r\n            }\r\n            window.location = url;\r\n        });\r\n    }\r\n\r\n    // Initialisation des tooltips Bootstrap\r\n\r\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\r\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n        return new bootstrap.Tooltip(tooltipTriggerEl)\r\n    });\r\n\r\n\r\n\r\n    // Synchroniser les sélecteurs de page\r\n    document.getElementById('screenSelector')?.addEventListener('change', function(e) {\r\n        const pageId = this.value;\r\n        document.querySelectorAll('input[name=\"pageId\"]').forEach(input => {\r\n            input.value = pageId;\r\n        });\r\n        \r\n        document.querySelectorAll('select[id^=\"page-select-\"]').forEach(select => {\r\n            select.value = pageId;\r\n        });\r\n    });\r\n\r\n    // Dans audit.js, ajouter dans le DOMContentLoaded\r\n    /*const deleteProjectBtn = document.getElementById('deleteProjectBtn');\r\n    if (deleteProjectBtn) {\r\n        deleteProjectBtn.addEventListener('click', async function() {\r\n            if (!confirm('Êtes-vous sûr de vouloir supprimer ce projet ? Cette action est irréversible.')) {\r\n                return;\r\n            }\r\n\r\n            const spinner = this.querySelector('.spinner-border');\r\n            try {\r\n                this.disabled = true;\r\n                spinner.classList.remove('d-none');\r\n\r\n                const response = await fetch(`/audit/${currentProjectId}`, {\r\n                    method: 'DELETE'\r\n                });\r\n\r\n                const data = await response.json();\r\n\r\n                if (data.success) {\r\n                    // Rediriger vers la page d'accueil\r\n                    window.location.href = '/';\r\n                } else {\r\n                    throw new Error(data.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Erreur:', error);\r\n                alert('Erreur lors de la suppression du projet');\r\n            } finally {\r\n                this.disabled = false;\r\n                spinner.classList.add('d-none');\r\n            }\r\n        });\r\n    }\r\n*/\r\n\r\n\r\n    // Dans audit.js, ajouter ceci\r\n// Dans audit.js, cherchez la partie qui ressemble à ceci :\r\n\r\n// Dans audit.js, modifiez la partie qui gère l'ouverture du collapse :\r\ndocument.querySelectorAll('[data-bs-toggle=\"collapse\"]').forEach(button => {\r\n    const targetId = button.getAttribute('data-bs-target');\r\n    const target = document.querySelector(targetId);\r\n    if (!target) return;\r\n\r\n    target.addEventListener('show.bs.collapse', async function() {\r\n        // Récupérer l'ID du critère et le formater correctement\r\n        const criterionId = button.getAttribute('data-bs-target')\r\n                              .replace('#collapse-', '')  \r\n                              .replace('-', '.'); // Changement ici : on remplace le tiret par un point\r\n        const pageId = document.getElementById('screenSelector')?.value;\r\n        console.log('Chargement des NC pour', criterionId);\r\n        \r\n        const wrapper = document.querySelector(`#wrapper-${criterionId.replace('.', '-')}`);\r\n        if (!wrapper) {\r\n            console.error('Wrapper non trouvé pour le critère', criterionId);\r\n            return;\r\n        }\r\n\r\n        if (pageId) {\r\n            const loadingSpinner = document.createElement('div');\r\n            loadingSpinner.className = 'text-center my-4';\r\n            loadingSpinner.innerHTML = `\r\n                <div class=\"spinner-border\" role=\"status\">\r\n                    <span class=\"visually-hidden\">Chargement...</span>\r\n                </div>\r\n            `;\r\n            wrapper.innerHTML = '';\r\n            wrapper.appendChild(loadingSpinner);\r\n\r\n            try {\r\n                const url = `/audit/${currentProjectId}/criterion/${criterionId}/allnc?pageId=${pageId}`;\r\n                console.log('URL appelée:', url);\r\n                const response = await fetch(url);\r\n                const data = await response.json();\r\n                console.log('Données reçues:', data);\r\n\r\n                wrapper.innerHTML = '';\r\n                \r\n                if (!data.ncs || data.ncs.length === 0) {\r\n                    wrapper.innerHTML = `\r\n                        <div class=\"alert alert-info\">\r\n                            Aucune non-conformité trouvée pour ce critère sur cette page\r\n                        </div>\r\n                    `;\r\n                } else {\r\n                    for (const nc of data.ncs) {\r\n                        const templateResponse = await fetch(`/nc-template?data=${encodeURIComponent(JSON.stringify(nc))}`);\r\n                        const html = await templateResponse.text();\r\n                        wrapper.insertAdjacentHTML('beforeend', html);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Erreur:', error);\r\n                wrapper.innerHTML = `\r\n                    <div class=\"alert alert-danger\">\r\n                        Une erreur est survenue lors du chargement des non-conformités: ${error.message}\r\n                    </div>\r\n                `;\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n   // Dans audit.js, ajoutez cette fonction :\r\n\r\n    // Gestionnaire pour \"Voir tous les écrans\"\r\n    // Dans audit.js, gardez uniquement cette partie pour la gestion du bouton \"Voir tous les écrans\"\r\ndocument.querySelectorAll('.seeall').forEach(button => {\r\n    button.addEventListener('click', async function() {\r\n        const criterionId = this.closest('.collapse_container')\r\n                              .id.replace('accordion-detail-', '')\r\n                              .replace('-', '.');\r\n        const wrapper = document.querySelector(`#wrapper-${criterionId.replace('.', '-')}`);\r\n        const currentPageId = document.getElementById('screenSelector')?.value;\r\n        \r\n        if (!wrapper) return;\r\n\r\n        const loadingSpinner = document.createElement('div');\r\n        loadingSpinner.className = 'text-center my-4';\r\n        loadingSpinner.innerHTML = `\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Chargement...</span>\r\n            </div>\r\n        `;\r\n\r\n        try {\r\n            wrapper.innerHTML = '';\r\n            wrapper.appendChild(loadingSpinner);\r\n\r\n            // Si on montre déjà toutes les pages, revenir à la page courante\r\n            if (this.dataset.showingAll === 'true') {\r\n                const response = await fetch(`/audit/${currentProjectId}/criterion/${criterionId}/allnc?pageId=${currentPageId}`);\r\n                const data = await response.json();\r\n\r\n                wrapper.innerHTML = '';\r\n                \r\n                if (!data.ncs || data.ncs.length === 0) {\r\n                    wrapper.innerHTML = `\r\n                        <div class=\"alert alert-info\">\r\n                            Aucune non-conformité trouvée pour ce critère sur cette page\r\n                        </div>\r\n                    `;\r\n                } else {\r\n                    for (const nc of data.ncs) {\r\n                        const templateResponse = await fetch(`/nc-template?data=${encodeURIComponent(JSON.stringify(nc))}`);\r\n                        const html = await templateResponse.text();\r\n                        wrapper.insertAdjacentHTML('beforeend', html);\r\n                    }\r\n                }\r\n\r\n                this.textContent = 'Voir tous les écrans';\r\n                this.classList.remove('btn-primary');\r\n                this.classList.add('btn-secondary');\r\n                this.dataset.showingAll = 'false';\r\n            } \r\n            // Sinon, montrer toutes les pages\r\n            else {\r\n                const response = await fetch(`/audit/${currentProjectId}/criterion/${criterionId}/allnc`);\r\n                const data = await response.json();\r\n\r\n                wrapper.innerHTML = '';\r\n                \r\n                if (!data.ncs || data.ncs.length === 0) {\r\n                    wrapper.innerHTML = `\r\n                        <div class=\"alert alert-info\">\r\n                            Aucune non-conformité trouvée pour ce critère\r\n                        </div>\r\n                    `;\r\n                } else {\r\n                    for (const nc of data.ncs) {\r\n                        const templateResponse = await fetch(`/nc-template?data=${encodeURIComponent(JSON.stringify(nc))}`);\r\n                        const html = await templateResponse.text();\r\n                        wrapper.insertAdjacentHTML('beforeend', html);\r\n                    }\r\n                }\r\n\r\n                this.textContent = 'Revenir à l\\'écran courant';\r\n                this.classList.remove('btn-secondary');\r\n                this.classList.add('btn-primary');\r\n                this.dataset.showingAll = 'true';\r\n            }\r\n\r\n            // Réinitialiser les handlers de suppression\r\n            wrapper.querySelectorAll('.delete-nc').forEach(deleteBtn => {\r\n                if (!deleteBtn.dataset.handlerAttached) {\r\n                    const formHandler = new FormHandler(document.querySelector('form.nc-form'));\r\n                    formHandler.setupDeleteHandler(deleteBtn);\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('Erreur:', error);\r\n            wrapper.innerHTML = `\r\n                <div class=\"alert alert-danger\">\r\n                    Une erreur est survenue lors du chargement des non-conformités: ${error.message}\r\n                </div>\r\n            `;\r\n        }\r\n    });\r\n});\r\n    \r\n    // Ajouter un listener sur le changement de page\r\n    document.getElementById('screenSelector')?.addEventListener('change', function() {\r\n        // Réinitialiser tous les boutons \"Voir tous les écrans\"\r\n        document.querySelectorAll('.seeall').forEach(button => {\r\n            if (this.value) {\r\n                button.dataset.showingAll = 'false';\r\n                button.textContent = 'Voir tous les écrans';\r\n                button.classList.remove('btn-primary');\r\n                button.classList.add('btn-secondary');\r\n            } else {\r\n                button.dataset.showingAll = 'true';\r\n                button.textContent = 'Revenir à l\\'écran courant';\r\n                button.classList.remove('btn-secondary');\r\n                button.classList.add('btn-primary');\r\n            }\r\n        });\r\n    });\r\n\r\n});"]}